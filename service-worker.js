// Version du cache
// ðŸš¨ IMPORTANT : IncrÃ©menter cette constante Ã  chaque dÃ©ploiement pour dÃ©clencher la mise Ã  jour !
const CACHE_VERSION = 'v1.2'; // <-- IncrÃ©mentÃ©
const CACHE_NAME = `montresor-gate-cache-${CACHE_VERSION}`;

// Liste des assets Ã  prÃ©-cacher
const ASSETS_TO_CACHE = [
Â  '/',
Â  '/index.html',
Â  '/style.css',
Â  '/script.js',
Â  '/manifest.json',
Â  '/icons/guest_logo.png',
Â  '/icons/android-chrome-192x192.png',
Â  '/icons/android-chrome-512x512.png',
Â  '/icons/apple-touch-icon.png',
Â  '/icons/favicon-32x32.png',
Â  '/icons/favicon-16x16.png',
Â  '/icons/favicon.ico',
];

// Installation du service worker et prÃ©-cache des assets
self.addEventListener('install', (event) => {
Â  self.skipWaiting(); // <-- GardÃ© : Force le passage de 'waiting' Ã  'activating'
Â  event.waitUntil(
Â  Â  caches.open(CACHE_NAME)
Â  Â  Â  .then((cache) => {
Â  Â  Â  Â  console.log('Cache ouvert pour version:', CACHE_VERSION);
Â  Â  Â  Â  return cache.addAll(ASSETS_TO_CACHE);
Â  Â  Â  })
Â  Â  Â  .catch((err) => {
Â  Â  Â  Â  console.error('Erreur lors de l\'installation du cache:', err);
Â  Â  Â  })
Â  );
});

// Activation : suppression des anciens caches et notification des clients
self.addEventListener('activate', (event) => {
Â  event.waitUntil(
Â  Â  caches.keys()
Â  Â  Â  .then((cacheNames) => Promise.all(
Â  Â  Â  Â  cacheNames.map((cacheName) => {
Â  Â  Â  Â  Â  if (cacheName !== CACHE_NAME) {
Â  Â  Â  Â  Â  Â  console.log('Suppression de l\'ancien cache:', cacheName);
Â  Â  Â  Â  Â  Â  return caches.delete(cacheName);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  })
Â  Â  Â  ))
Â  Â  Â  .then(() => self.clients.claim()) // <-- GardÃ© : Prend le contrÃ´le immÃ©diatement
Â  Â  Â  .then(() => {
Â  Â  Â  Â  // Notifier les clients qu'une nouvelle version est disponible
Â  Â  Â  Â  self.clients.matchAll().then(clients => {
Â  Â  Â  Â  Â  clients.forEach(client => client.postMessage({ type: 'NEW_VERSION_AVAILABLE' }));
Â  Â  Â  Â  });
Â  Â  Â  })
Â  );
});

// Gestion des fetch requests (StratÃ©gie: Cache, puis Network pour le reste)
self.addEventListener('fetch', (event) => {
Â  if (event.request.method !== 'GET') return;

Â  // Pour les ressources prÃ©-cachÃ©es (votre app), utilisez 'Cache Only'.
Â  // Pour les autres ressources (Firebase, webhooks, etc.), utilisez 'Cache, puis Network'.
Â  if (ASSETS_TO_CACHE.includes(new URL(event.request.url).pathname)) {
Â  Â  // Si c'est un asset critique, servez-le DIRECTEMENT du cache de la nouvelle version
Â  Â  event.respondWith(caches.match(event.request));
Â  Â  return;
Â  }


Â  event.respondWith(
Â  Â  caches.match(event.request)
Â  Â  Â  .then((cachedResponse) => {
Â  Â  Â  Â  // Si c'est dans le cache, retournez-le (pour les dÃ©pendances comme Firebase si elles y sont)
Â  Â  Â  Â  if (cachedResponse) return cachedResponse;
        
        // Sinon, faites une requÃªte rÃ©seau
        return fetch(event.request)
          .catch(() => {
            // Fallback si la requÃªte rÃ©seau Ã©choue et que c'est une navigation (index.html)
            if (event.request.mode === 'navigate') {
              return caches.match('/index.html');
            }
          });
Â  Â  Â  })
Â  );
});
