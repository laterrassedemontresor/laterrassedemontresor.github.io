// service-worker.js

// ðŸš¨ Ã‰TAPE 1 : TOUJOURS INCRÃ‰MENTER CETTE VERSION Ã€ CHAQUE DÃ‰PLOIEMENT
// Par exemple, passez de 'v1.2' Ã  'v1.3' pour la prochaine mise Ã  jour.
const CACHE_VERSION = 'v1.5'; 
const CACHE_NAME = `montresor-gate-cache-${CACHE_VERSION}`;

// Liste des assets Ã  prÃ©-cacher
const ASSETS_TO_CACHE = [
Â  '/',
Â  '/index.html',
Â  '/style.css',
Â  '/script.js',
Â  '/manifest.json',
Â  '/icons/guest_logo.png',
Â  '/icons/android-chrome-192x192.png',
Â  '/icons/android-chrome-512x512.png',
Â  '/icons/apple-touch-icon.png',
Â  '/icons/favicon-32x32.png',
Â  '/icons/favicon-16x16.png',
Â  '/icons/favicon.ico',
];

// Installation du service worker et prÃ©-cache des assets
self.addEventListener('install', (event) => {
Â  self.skipWaiting(); // <-- Force l'activation immÃ©diate du nouveau Service Worker
Â  event.waitUntil(
Â  Â  caches.open(CACHE_NAME)
Â  Â  Â  .then((cache) => {
Â  Â  Â  Â  console.log('Cache ouvert pour version:', CACHE_VERSION);
Â  Â  Â  Â  return cache.addAll(ASSETS_TO_CACHE);
Â  Â  Â  })
Â  Â  Â  .catch((err) => {
Â  Â  Â  Â  console.error('Erreur lors de l\'installation du cache:', err);
Â  Â  Â  })
Â  );
});

// Activation : suppression des anciens caches et notification des clients
self.addEventListener('activate', (event) => {
Â  event.waitUntil(
Â  Â  caches.keys()
Â  Â  Â  .then((cacheNames) => Promise.all(
Â  Â  Â  Â  cacheNames.map((cacheName) => {
Â  Â  Â  Â  Â  if (cacheName !== CACHE_NAME) {
Â  Â  Â  Â  Â  Â  console.log('Suppression de l\'ancien cache:', cacheName);
Â  Â  Â  Â  Â  Â  return caches.delete(cacheName);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  })
Â  Â  Â  ))
Â  Â  Â  .then(() => self.clients.claim()) // <-- Prend le contrÃ´le de tous les onglets ouverts
Â  Â  Â  .then(() => {
Â  Â  Â  Â  // Notifier les clients qu'une nouvelle version est disponible
Â  Â  Â  Â  self.clients.matchAll({ type: 'window' }).then(clients => {
Â  Â  Â  Â  Â  clients.forEach(client => client.postMessage({ type: 'NEW_VERSION_AVAILABLE' }));
Â  Â  Â  Â  });
Â  Â  Â  })
Â  );
});

// Gestion des fetch requests : StratÃ©gie "Cache First, puis Network comme repli"
self.addEventListener('fetch', (event) => {
Â  if (event.request.method !== 'GET') return;

Â  const url = new URL(event.request.url);
  // Ignore les requÃªtes vers des domaines externes (Firebase, webhooks, Google)
Â  if (url.origin !== location.origin) return; 
  
Â  event.respondWith(
Â  Â  caches.match(event.request)
Â  Â  Â  .then((cachedResponse) => {
Â  Â  Â  Â  // 1. Tente de servir du cache (qui est le nouveau cache v1.3)
Â  Â  Â  Â  if (cachedResponse) {
Â  Â  Â  Â  Â  return cachedResponse;
Â  Â  Â  Â  }
        
        // 2. Si la ressource manque dans le cache (cause de l'Ã©cran blanc), essaie le rÃ©seau
Â  Â  Â  Â  return fetch(event.request)
Â  Â  Â  Â  Â  .catch(() => {
Â  Â  Â  Â  Â  Â  // 3. Si tout Ã©choue, pour une navigation (le chargement de la page), retourne l'index en cache.
Â  Â  Â  Â  Â  Â  if (event.request.mode === 'navigate') {
Â  Â  Â  Â  Â  Â  Â  return caches.match('/index.html');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  });
Â  Â  Â  })
Â  );
});
